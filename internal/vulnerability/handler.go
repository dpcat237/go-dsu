package vulnerability

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"sync"
	"time"

	"github.com/dpcat237/go-dsu/internal/logger"
	"github.com/dpcat237/go-dsu/internal/output"
)

const verifyTokenModule = "github.com/dpcat237/go-dsu@v0.8.0"

//Handler handles functions related to Vulnerability
type Handler interface {
	ModuleVulnerabilities(pth string) (Vulnerabilities, output.Output)
	IsSet() bool
}

type handler struct {
	lgr      logger.Logger
	lastCall time.Time
	mtx      *sync.Mutex
	token    string
}

//InitHandler initializes Vulnerability handler if OSS Index token was provided
func InitHandler(lgr logger.Logger, tkn string) (*handler, output.Output) {
	if tkn == "" {
		return &handler{}, output.Output{}
	}

	hnd := &handler{
		lgr:      lgr,
		lastCall: time.Now(),
		mtx:      &sync.Mutex{},
		token:    tkn,
	}
	return hnd, hnd.validateToken()
}

//ModuleVulnerabilities returns module vulnerabilities
func (hnd *handler) ModuleVulnerabilities(pth string) (Vulnerabilities, output.Output) {
	out := output.Create(pkg + ".ModuleVulnerabilities")
	var vlns Vulnerabilities

	if pth == "" {
		return vlns, out
	}

	req, reqOut := hnd.defineRequest(pth)
	if reqOut.HasError() {
		return vlns, reqOut
	}

	hnd.mtx.Lock()
	defer hnd.mtx.Unlock()
	pkgs, respOut := hnd.processRequest(req)
	hnd.lgr.Debug(fmt.Sprintf("Vulnerabilities response status %d for module %s", respOut.GetStatus(), pth))
	if respOut.HasError() {
		return vlns, respOut
	}

	return pkgs[0].Vulnerabilities, out
}

//IsSet checks if handler has all data to run
func (hnd *handler) IsSet() bool {
	return hnd.token != ""
}

func (hnd handler) defineRequest(pth string) (*http.Request, output.Output) {
	out := output.Create(pkg + ".setupRequest")

	body, err := json.Marshal(newRequestBody(pth))
	if err != nil {
		return nil, out.WithError(err)
	}

	req, err := http.NewRequest(
		http.MethodPost,
		ossIndexURL,
		bytes.NewBuffer(body),
	)
	if err != nil {
		return nil, out.WithError(err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Basic "+hnd.token)

	return req, out
}

func (hnd handler) processRequest(req *http.Request) ([]Package, output.Output) {
	out := output.Create(pkg + ".processRequest")
	var pkgs []Package

	var cli http.Client
	resp, err := cli.Do(req)
	if err != nil {
		return pkgs, out.WithError(err)
	}

	if resp.StatusCode != http.StatusOK {
		if resp.StatusCode == http.StatusTooManyRequests {
			return pkgs, out.WithErrorString("Too many request to OSS Index API. Try again in a few minutes").WithStatus(resp.StatusCode)
		}
		return pkgs, out.WithErrorString(fmt.Sprintf("Wrong status code %d", resp.StatusCode)).WithStatus(resp.StatusCode)
	}

	defer func() {
		if err := resp.Body.Close(); err != nil {
			hnd.lgr.Sugar().Debugw("Error closing response body: %s", err)
		}
	}()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return pkgs, out.WithError(err)
	}

	if err = json.Unmarshal(body, &pkgs); err != nil {
		return pkgs, out.WithError(err)
	}

	if len(pkgs) == 0 {
		return pkgs, out.WithErrorString("Response is empty")
	}

	return pkgs, out
}

func (hnd handler) validateToken() output.Output {
	out := output.Create(pkg + ".validateToken")

	if _, rspOut := hnd.ModuleVulnerabilities(verifyTokenModule); rspOut.GetStatus() == http.StatusUnauthorized {
		return out.WithErrorString("Wrong OSS Index token")
	}
	return out
}
