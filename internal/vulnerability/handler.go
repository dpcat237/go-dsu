package vulnerability

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/dpcat237/go-dsu/internal/logger"
	"github.com/dpcat237/go-dsu/internal/output"
)

//Handler handles functions related to Vulnerability
type Handler struct {
	lgr *logger.Logger
}

//InitHandler initializes Vulnerability handler
func InitHandler(lgr *logger.Logger) *Handler {
	return &Handler{
		lgr: lgr,
	}
}

//ModuleVulnerabilities returns module vulnerabilities
func (hnd Handler) ModuleVulnerabilities(pth string) (Vulnerabilities, output.Output) {
	out := output.Create(pkg + ".ModuleVulnerabilities")
	var vlns Vulnerabilities

	if pth == "" {
		return vlns, out
	}

	req, reqOut := hnd.defineRequest(pth)
	if reqOut.HasError() {
		return vlns, reqOut
	}

	pkgs, respOut := hnd.processRequest(req)
	if respOut.HasError() {
		return vlns, respOut
	}

	return pkgs[0].Vulnerabilities, out
}

func (hnd Handler) defineRequest(pth string) (*http.Request, output.Output) {
	out := output.Create(pkg + ".setupRequest")

	body, err := json.Marshal(newRequestBody(pth))
	if err != nil {
		return nil, out.WithError(err)
	}

	req, err := http.NewRequest(
		http.MethodPost,
		ossIndexURL,
		bytes.NewBuffer(body),
	)
	if err != nil {
		return nil, out.WithError(err)
	}
	req.Header.Set("Content-Type", "application/json")

	return req, out
}

func (hnd Handler) processRequest(req *http.Request) ([]Package, output.Output) {
	out := output.Create(pkg + ".processRequest")
	var pkgs []Package

	var cli http.Client
	resp, err := cli.Do(req)
	if err != nil {
		return pkgs, out.WithError(err)
	}

	if resp.StatusCode != http.StatusOK {
		return pkgs, out.WithErrorString(fmt.Sprintf("Wrong status code %d", resp.StatusCode))
	}

	defer func() {
		if err := resp.Body.Close(); err != nil {
			hnd.lgr.Sugar().Debugw("Error closing response body: %s", err)
		}
	}()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return pkgs, out.WithError(err)
	}

	if err = json.Unmarshal(body, &pkgs); err != nil {
		return pkgs, out.WithError(err)
	}

	if len(pkgs) == 0 {
		return pkgs, out.WithErrorString("Response is empty")
	}

	return pkgs, out
}
