package vulnerability

const (
	//SeverityLow low severity
	SeverityLow = Severity(iota)
	//SeverityMedium medium severity
	SeverityMedium
	//SeverityHigh high severity
	SeverityHigh
	//SeverityCritical critical severity
	SeverityCritical

	ossIndexURL = "https://ossindex.sonatype.org/api/v3/component-report"
	pkg         = "vulnerability"
)

//Coordinate contains details about package
type Package struct {
	Coordinates     string `json:",omitempty"` // package path
	Reference       string `json:",omitempty"` // URL to package page on OSS Index - https://ossindex.sonatype.org/component/pkg:[package path]
	Vulnerabilities Vulnerabilities
}

//RequestBody contains body of request
type RequestBody struct {
	Packages []string `json:"coordinates"`
}

//Severity level of vulnerability's severity
type Severity uint8

//Vulnerability contains details about a vulnerability
type Vulnerability struct {
	ID          string  `json:"id,omitempty"` // OSS Index ID of vulnerability
	Title       string  `json:",omitempty"`   // title of a vulnerability
	Description string  `json:",omitempty"`   // description of a vulnerability
	CvssScore   float64 `json:",omitempty"`   // score of the vulnerability in decimal
	CvssVector  string  `json:",omitempty"`   // score metrics https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=
	Cwe         string  `json:",omitempty"`   // Common Weakness Enumeration ID - http://cwe.mitre.org/
	Reference   string  `json:",omitempty"`   // OSS Index URL of a vulnerability - https://ossindex.sonatype.org/vuln/[ID]
}

//Vulnerabilities collection of vulnerabilities
type Vulnerabilities []Vulnerability

//HasVulnerability checks if collection has vulnerability by ID
func (vlns Vulnerabilities) HasVulnerability(id string) bool {
	for _, vln := range vlns {
		if vln.ID == id {
			return true
		}
	}
	return false
}

//Severity converts CVSS score to severity
func (vln Vulnerability) Severity() Severity {
	if vln.CvssScore >= 9 {
		return SeverityCritical
	}
	if vln.CvssScore >= 7 {
		return SeverityHigh
	}
	if vln.CvssScore >= 4 {
		return SeverityMedium
	}
	return SeverityLow
}

func newRequestBody(pth string) RequestBody {
	var reqBd RequestBody
	reqBd.Packages = append(reqBd.Packages, "pkg:"+pth)
	return reqBd
}
